<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>翻译 on Fangdun Cai</title>
    <link>https://fundon.me/tags/%E7%BF%BB%E8%AF%91/</link>
    <description>Recent content in 翻译 on Fangdun Cai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, Fangdun Cai; all rights reserved.</copyright>
    <lastBuildDate>Sat, 12 Dec 2015 22:22:46 +0800</lastBuildDate>
    <atom:link href="https://fundon.me/tags/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10 Habits of a Happy Node Hacker 2016</title>
      <link>https://fundon.me/blog/10-Habits-of-a-Happy-Node-Hacker-2016/</link>
      <pubDate>Sat, 12 Dec 2015 22:22:46 +0800</pubDate>
      
      <guid>https://fundon.me/blog/10-Habits-of-a-Happy-Node-Hacker-2016/</guid>
      <description>

&lt;p&gt;原文：&lt;a href=&#34;https://blog.heroku.com/archives/2015/11/10/node-habits-2016&#34;&gt;10 Habits of a Happy Node Hacker (2016)&lt;/a&gt; by Hunter&lt;/p&gt;

&lt;p&gt;在 2015 年底，JavaScript 开发者周边已经充斥了很多工具，供他们支配使用。
&lt;a href=&#34;https://blog.heroku.com/archives/2014/3/11/node-habits&#34;&gt;上次&lt;/a&gt;我们已经观察了这个问题，现代 JS 的兴起。今天，我们很容易迷失在这巨大的生态系统中，
所以成功的团队都需要遵循指南，使他们的时间和项目保存健康。&lt;/p&gt;

&lt;p&gt;这 10 个习惯很适合即将进入 2016 的 Node.js 黑客。
它们真对的是应用开发者，而不是模块作者，因为这些群体有不同的目标和约束：&lt;/p&gt;

&lt;h2 id=&#34;1-使用-npm-init-开始每个新项目:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;1. 使用 &lt;code&gt;npm init&lt;/code&gt; 开始每个新项目&lt;/h2&gt;

&lt;p&gt;NPM &lt;code&gt;init&lt;/code&gt; 命令将为你的项目生成一个有效的 &lt;code&gt;package.json&lt;/code&gt; 文件，
从工作目录中自动推到出一些常见属性。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir my-awesome-app
$ cd my-awesome-app
$ npm init --yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我比较懒，所以我使用了 &lt;code&gt;--yes&lt;/code&gt; 标志去执行它，然后打开 package.json 做些修改。
第一件事你应该指定一个 &lt;code&gt;engines&lt;/code&gt; 关键词，使用你当前的 node 版本（&lt;code&gt;node -v&lt;/code&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;engines&amp;quot;: {
  &amp;quot;node&amp;quot;: &amp;quot;4.2.1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-使用一个智能的-npmrc-配置:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;2. 使用一个智能的 &lt;code&gt;.npmrc&lt;/code&gt; 配置&lt;/h2&gt;

&lt;p&gt;默认地，npm 不会保存已经安装的依赖到 package.json（所以你总是需要追踪你的依赖！）。&lt;/p&gt;

&lt;p&gt;如果你使用 &lt;code&gt;--save&lt;/code&gt; 标志去自动更新 package.json，npm 安装这些包会以 &lt;code&gt;^&lt;/code&gt; 开头，会导致你的
模块在不同版本之间漂移。这对模块开发没问题，但对应用不好，
如果你想要在所有的环境之间保持一致的依赖关系。&lt;/p&gt;

&lt;p&gt;一个解决方案是像这样安装包：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install foobar --save --save-exact
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更胜一筹的，你可以把这些选项添加到 &lt;code&gt;~/.npmrc&lt;/code&gt; 中，更新你的默认设置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm config set save=true
$ npm config set save-exact=true
$ cat ~/.npmrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，&lt;code&gt;npm install foobar&lt;/code&gt; 将会自动添加 &lt;code&gt;foobar&lt;/code&gt; 到 package.json
并且你的依赖不会在安装时产生偏移!&lt;/p&gt;

&lt;p&gt;如果你更喜欢在 package.json 中保持弹性依赖，但仍然需要在生产环境中锁住依赖的话，你或者可以
生成 &lt;a href=&#34;https://docs.npmjs.com/cli/shrinkwrap&#34;&gt;npm&amp;rsquo;s shrinkwrap&lt;/a&gt; 到你的工作流中。这需要花费更多的精力，但是还是很多好处的，保持
准确的版本的嵌套依赖关系。&lt;/p&gt;

&lt;h2 id=&#34;3-快跳上-es6-火车吧:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;3. 快跳上 ES6 火车吧！&lt;/h2&gt;

&lt;p&gt;Node 4+ 携带了一个 &lt;a href=&#34;https://nodejs.org/en/blog/release/v4.0.0/&#34;&gt;V8 引擎的更新&lt;/a&gt;，拥有几个有用的 &lt;a href=&#34;https://nodejs.org/en/docs/es6/&#34;&gt;ES6 特性&lt;/a&gt;。
不要害怕，并不是一些复杂的东西，你可以轻松学习它。有许多简单的改进，让人满意。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let user = users.find(u =&amp;gt; u.id === ID);

console.log(`Hello, ${ user.name }!`);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-坚持使用小写:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;4. 坚持使用小写&lt;/h2&gt;

&lt;p&gt;一些语言鼓励文件名匹配类名，比如 &lt;code&gt;MyClass&lt;/code&gt; 和 &lt;code&gt;MyClass.js&lt;/code&gt;。在 Node 中，
不要那样做。而是使用文件名小写的方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let MyClass = require(&#39;my-class&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node.js 是一个罕见的范例，Linux-centric 化工具，但跨平台支持又多。
当在 OSX 和 Windows 平台时，对待 &lt;code&gt;myclass.js&lt;/code&gt; 和 &lt;code&gt;MyClass.js&lt;/code&gt; 是一样的，
Linux 不会。如果要编写可在这些平台移植的代码，你就需要明确匹配 &lt;code&gt;require&lt;/code&gt;
中的声明，包括大写。&lt;/p&gt;

&lt;p&gt;一个简单正确的方式，就是一切都使用文件名小写的方式。例如 &lt;code&gt;my-class.js&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;译者：其实 Mac OSX 也可以设置文件系统 case-sensitive。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;5-cluster-你的应用:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;5. Cluster 你的应用&lt;/h2&gt;

&lt;p&gt;自从 node 运行时被限制在单核 CPU 和大约 1.5 GB 的内存之后，
部署一个无 clustered 模式的 node 应用在一个大型服务器上是一个对资源巨大的浪费。&lt;/p&gt;

&lt;p&gt;要想利用多核和内存超过 1.5 GB 的话，把支持 &lt;a href=&#34;https://nodejs.org/api/cluster.html&#34;&gt;Cluster&lt;/a&gt; 烧尽你的应用。
即使如果今天你仅仅把单个进程运行在小硬件上，在未来 Cluster 也会带给你足够的灵活。&lt;/p&gt;

&lt;p&gt;测试是最好的方式，弄清楚你的应用理想的 clustered 进程数，
但最好根据你的平台提出一个&lt;a href=&#34;https://devcenter.heroku.com/articles/node-concurrency&#34;&gt;合理的默认值&lt;/a&gt;，可以有个简单的备选。
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const CONCURRENCY = process.env.WEB_CONCURRENCY || 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选择一个 &lt;a href=&#34;https://www.npmjs.com/search?q=cluster&#34;&gt;Cluster abstraction&lt;/a&gt; 可以避免重复造（进程管理的）轮子。如果你喜欢分开
&lt;code&gt;master&lt;/code&gt; 和 &lt;code&gt;worker&lt;/code&gt; 文件，可以试试 &lt;a href=&#34;https://www.npmjs.com/package/forky&#34;&gt;forky&lt;/a&gt;。 如果你更喜欢单个入口文件和函数的话，
看看这个 &lt;a href=&#34;https://www.npmjs.com/package/throng&#34;&gt;throng&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;6-有环境意识:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;6. 有环境意识&lt;/h2&gt;

&lt;p&gt;不要在你的项目中乱扔具体环境配置文件！而应该使用环境变量。&lt;/p&gt;

&lt;p&gt;首选，安装 &lt;a href=&#34;https://github.com/strongloop/node-foreman&#34;&gt;node-foreman&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install --save --save-exact foreman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，创建一个 &lt;a href=&#34;https://devcenter.heroku.com/articles/procfile&#34;&gt;Procfile&lt;/a&gt; 文件，声明你的应用的进程类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web: bin/web
worker: bin/worker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，你就可以使用 &lt;code&gt;nf&lt;/code&gt; 程序启动你的应用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;start&amp;quot;: &amp;quot;nf start&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要支持本地开发环境，可以创建 &lt;code&gt;.gitignore&lt;/code&gt; 文件，把 &lt;code&gt;.env&lt;/code&gt; 文件加入进来。
使用 node-foreman 时，&lt;code&gt;.env&lt;/code&gt; 文件将会被加载进来：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DATABASE_URL=&#39;postgres://localhost/foobar&#39;
HTTP_TIMEOUT=10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，一个简单的命令（&lt;code&gt;npm start&lt;/code&gt;）将会使 &lt;code&gt;web&lt;/code&gt; 和 &lt;code&gt;worker&lt;/code&gt; 进程在那个环境下
同时运转起来。然后，当你部署你的项目时，它会在新的主机上自动适应这些环境变量。&lt;/p&gt;

&lt;p&gt;比起 &lt;code&gt;config/abby-dev.js&lt;/code&gt;、&lt;code&gt;config/brian-dev.js&lt;/code&gt;，&lt;code&gt;config/qa1.js&lt;/code&gt;、
&lt;code&gt;config/qa2.js&lt;/code&gt;、&lt;code&gt;config/prod.js&lt;/code&gt;，这个更加简单灵活。&lt;/p&gt;

&lt;h2 id=&#34;7-避免垃圾回收:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;7. 避免垃圾回收&lt;/h2&gt;

&lt;p&gt;Node（V8）使用一个懒惰、贪婪的垃圾回收。它默认被限制在大约 1.5 GB。
在回收无用内存前，它有时会等待，直到它彻底回收这些无用内存。如果你的内存使用不断增加，
它可能不是内存泄漏，反而是 &lt;a href=&#34;https://github.com/nodejs/node/issues/3370#issuecomment-148108323&#34;&gt;node 通常的懒惰行为&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;要想对你应用的垃圾回收获得更多的控制，你可以在你的 &lt;code&gt;Procfile&lt;/code&gt; 文件中给 V8 添加一些标志：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web: node --optimize_for_size --max_old_space_size=920 --gc_interval=100 server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个尤其重要，如果你的应用是运行在一个少于 1.5 GB 内存的环境上。
例如，你想要把 node 调整到一个 512 MB 的容器上，试试这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web: node --optimize_for_size --max_old_space_size=460 --gc_interval=100 server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-把事情链接起来:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;8. 把事情链接起来&lt;/h2&gt;

&lt;p&gt;Npm 的&lt;a href=&#34;https://docs.npmjs.com/misc/scripts&#34;&gt;生命周期脚本&lt;/a&gt; 可以为自动化创建丰富的钩子。如果你需要在构建你的应用之前运行一些东西，
你可以使用 &lt;code&gt;preinstall&lt;/code&gt; 脚本。如果想使用 grunt、gulp、browserify 或者 webpack 构建
assets 呢？那就使用 &lt;code&gt;postinstall&lt;/code&gt; 脚本。&lt;/p&gt;

&lt;p&gt;在 package.json 中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;postinstall&amp;quot;: &amp;quot;bower install &amp;amp;&amp;amp; grunt build&amp;quot;,
  &amp;quot;start&amp;quot;: &amp;quot;nf start&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以使用环境变量去控制这些脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;postinstall&amp;quot;: &amp;quot;if $BUILD_ASSETS; then npm run build-assets; fi&amp;quot;,
&amp;quot;build-assets&amp;quot;: &amp;quot;bower install &amp;amp;&amp;amp; grunt build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的脚本想在外面进行控制的话，把它们移到相应的文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;postinstall&amp;quot;: &amp;quot;scripts/postinstall.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于 &lt;code&gt;./node_modules/.bin&lt;/code&gt; 会被自动添加到环境变量 &lt;code&gt;PATH&lt;/code&gt; 上，在 package.json 中的脚本
会从上面去寻找，所以你可以直接执行它们，就像 &lt;code&gt;bower&lt;/code&gt; 或者 &lt;code&gt;wepack&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;9-仅-git-重要的部分:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;9. 仅 git 重要的部分&lt;/h2&gt;

&lt;p&gt;大多数的应用是由必要的文件和生成文件组成。当使用一个版本控制系统像 git 时，你应该避免对生成的
任何文件都进行追踪。&lt;/p&gt;

&lt;p&gt;例如，你的 node 应用可能会有一个 &lt;code&gt;node_modules&lt;/code&gt; 依赖目录，这个你应该&lt;a href=&#34;https://docs.npmjs.com/misc/faq#should-i-check-my-node-modules-folder-into-git&#34;&gt;避免 git 控制&lt;/a&gt;。
只要每个依赖都列在 package.json 文件中，任何人都可以创建一个你的应用的工作副本，包括
&lt;code&gt;node_modules&lt;/code&gt; － 在运行 &lt;code&gt;npm install&lt;/code&gt; 后。&lt;/p&gt;

&lt;p&gt;追踪这些生成文件，将会导致你的 git 历史充斥着无用的声音和臃肿。这是非常糟糕的，自从有些依赖是
原生并且需要被编译时，检查它们将使你的应用缺少便捷性，因为你将需要提供多个编译版本，
但却只从一个、可能是不正确的环境中生成。&lt;/p&gt;

&lt;p&gt;同样的原因，你也不应该检查 &lt;code&gt;bower_components&lt;/code&gt; 或者由 grunt 编译生成的 assets。&lt;/p&gt;

&lt;p&gt;如果你之前已经不慎检查了 &lt;code&gt;node_modules&lt;/code&gt; 目录，没关系，你可以删掉它，像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#39;node_modules&#39; &amp;gt;&amp;gt; .gitignore
$ git rm -r --cached node_modules
$ git commit -am &#39;ignore node_modules&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我也忽略了 npm 的 logs 文件，所以它们不会搞乱我的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#39;npm-debug.log&#39; &amp;gt;&amp;gt; .gitignore
$ git commit -am &#39;ignore npm-debug&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;忽略了这些无用的文件，你的仓库将会更加的小，你的提交将会更加简单，
并且你将避免合并这些因生成目录而导致的分歧。&lt;/p&gt;

&lt;h2 id=&#34;10-简化:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;10. 简化&lt;/h2&gt;

&lt;p&gt;技术预测是不准确的，但我还是会预测下即将到来的一年，2016 将是 JavaScript 简化的一年。&lt;/p&gt;

&lt;p&gt;越来越多的开发者正在简化它们的架构。为替换庞大的 MVCs 框架，他们正在使用&lt;a href=&#34;https://medium.com/swlh/scaling-on-the-cheap-933e46944886#.2lvubkyhm&#34;&gt;静态化的前端构建项目&lt;/a&gt;，
这样可以部署在 CDN 上，且使用一个 Node.js API 提供动态数据。&lt;/p&gt;

&lt;p&gt;我们也开始看到了复杂的构建系统对我们项目的阻力。一些前沿的开发者正在简化他们的构建系统。例如，
使用一个 &lt;code&gt;vanilla&lt;/code&gt; 构建系统，没有 &lt;a href=&#34;https://medium.com/@tarkus/you-might-not-need-gulp-js-89a0220487dd#.etiox78kw&#34;&gt;bower、gulp 或者 grunt&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最终，我们将简化我们的代码在 2016。有时，这来自删除功能，
就像 &lt;a href=&#34;https://www.youtube.com/watch?v=bo36MrBfTk4&#34;&gt;Douglas Crockford&amp;rsquo;s &amp;ldquo;The Better Parts&amp;rdquo;&lt;/a&gt;。
其他，这来自添加功能 － 就像我喜欢的 callback 的替代物 &lt;a href=&#34;https://thomashunter.name/blog/the-long-road-to-asyncawait-in-javascript/&#34;&gt;async-await&lt;/a&gt;。
Async-await 在 Node 中还不能用，但今天你可以借助牛逼的 &lt;a href=&#34;http://babeljs.io/docs/usage/cli/#babel-node&#34;&gt;Babeljs&lt;/a&gt; 项目使用它。&lt;/p&gt;

&lt;p&gt;不要把看到那么多工具和框架一次性都挤进你的项目，试着去简化你的工作。&lt;/p&gt;

&lt;h2 id=&#34;你的习惯是什么:ea9bff932f9bb2c44cceb6375aa9fa7a&#34;&gt;你的习惯是什么？&lt;/h2&gt;

&lt;p&gt;我试着在我的所有项目中遵从这些习惯。不管你是 &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction&#34;&gt;node 新人&lt;/a&gt;还是服务端 JS 老手，我确定你会为
自己开发一些技巧。我们非常欢迎听到它们！使用 &lt;a href=&#34;https://twitter.com/search?f=tweets&amp;amp;vertical=default&amp;amp;q=%23node_habits&amp;amp;src=typd&#34;&gt;#node_habits&lt;/a&gt; 标签，分享你的习惯！&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

&lt;p&gt;本文由 fundon 翻译，未经许可，不得转载。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>