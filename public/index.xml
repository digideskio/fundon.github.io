<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fangdun Cai</title>
    <link>https://fundon.me/</link>
    <description>Recent content on Fangdun Cai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, Fangdun Cai; all rights reserved.</copyright>
    <lastBuildDate>Thu, 26 Nov 2015 02:42:34 +0800</lastBuildDate>
    <atom:link href="https://fundon.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Docker Compose in Node.js Project</title>
      <link>https://fundon.me/web/Using-Docker-Compose-in-Node.js-Project/</link>
      <pubDate>Thu, 26 Nov 2015 02:42:34 +0800</pubDate>
      
      <guid>https://fundon.me/web/Using-Docker-Compose-in-Node.js-Project/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://medium.com/@fundon/using-docker-compose-in-node-js-project-65081953ce62#.3h17cxx5v&#34;&gt;Published on Medium&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;docker-到底有什么优点吸引我们&#34;&gt;Docker 到底有什么优点吸引我们？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt;：允许自由组合各种服务来构建我们的应用，避免&lt;strong&gt;开发&lt;/strong&gt;和&lt;strong&gt;生产&lt;/strong&gt;之间的环境问题，并且不局限在任何平台和语言&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ship&lt;/strong&gt;：通过统一的用户接口，管理，设计应用开发、测试、发布的生命周期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run&lt;/strong&gt;：可以快捷地在多个平台，发布可扩展、安全、可靠的服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;use-it&#34;&gt;Use it!&lt;/h3&gt;

&lt;p&gt;说了这么多，那就让我们玩起来！&lt;/p&gt;

&lt;h4 id=&#34;0-install-docker-tools&#34;&gt;0. Install &lt;a href=&#34;https://docs.docker.com&#34;&gt;Docker&lt;/a&gt; Tools&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install docker docker-machine docker-compose
$ docker help
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com&#34;&gt;Docker&lt;/a&gt; - 开源的容器应用引擎&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Machine&lt;/a&gt; - 管理本地、云服务提供商中的 Docker 服务&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Compose&lt;/a&gt; - 定义，组合，运行多个容器应用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果是 Mac OS X 用户，请先安装 Virtualbox &lt;code&gt;brew cask install virtualbox&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果不喜欢 Docker CLI 工具，也可以安装 &lt;a href=&#34;https://docs.docker.com/kitematic/&#34;&gt;Kitematic&lt;/a&gt;，Kitematic 是 Docker 的 GUI 管理工具。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-create-node-js-project&#34;&gt;1. Create Node.js Project&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir docker-express-mongoose-reis-example
$ cd docker-express-mongoose-redis-example
$ npm init
$ npm i express express-session connect-redis ioredis mongoose --save
$ touch server.js 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;server.js&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Import modules
const express = require(&#39;express&#39;)
const session = require(&#39;express-session&#39;)
const ioredis = require(&#39;ioredis&#39;)
const RedisStore = require(&#39;connect-redis&#39;)(session)
const mongoose = require(&#39;mongoose&#39;)

// Create App
const app = express()

// Redis Client
const client = ioredis.createClient(6379, process.env.REDIS_PORT_6379_TCP_ADDR)

// Compose Schema
const ComposeSchema = new mongoose.Schema({
  name:  String,
  build: String,
  ports: [String]
})

// Compose Model
const Compose = mongoose.model(&#39;Compose&#39;, ComposeSchema) 

// Create Session
app.use(session({
  store: new RedisStore({ client }),
  secret: &#39;Dream&#39;
}))

// Routes for redis
app.get(&#39;/redis&#39;, (req, res) =&amp;gt; {
  res.send(&#39;Redis is live!&#39;)
})
app.get(&#39;/redis/set&#39;, (req, res) =&amp;gt; {
  client.set(&#39;key&#39;, &#39;Redis is live!&#39;);
  res.send(`It&#39;s redis.`)
})
app.get(&#39;/redis/get&#39;, (req, res) =&amp;gt; {
  client.get(&#39;key&#39;).then(result =&amp;gt; {
    res.send(result || &#39;Nothing!&#39;)
  })
})

// Routes for redis
app.get(&#39;/mongoose&#39;, (req, res) =&amp;gt; {
  res.send(&#39;Mongoose is live!&#39;)
})
app.get(&#39;/mongoose/set&#39;, (req, res) =&amp;gt; {
  var c = new Compose({
    name: &#39;docker&#39;,
    build: &#39;.&#39;,
    ports: [&#39;3000:3000&#39;]
  })

  c.save().then(() =&amp;gt; {
      res.send(`It&#39;s mongoose.`);
    })
})
app.get(&#39;/mongoose/get&#39;, (req, res) =&amp;gt; {
  Compose
    .find({ name: &#39;docker&#39; })
    .then((result) =&amp;gt; {
      res.send(result)
    })
})

app.use((req, res) =&amp;gt; {
  res.send(&#39;Hello Docker, Express, Mongoose, Redis!&#39;)
})

mongoose.connect(`mongodb://${process.env.MONGO_PORT_27017_TCP_ADDR}`, (err) =&amp;gt; {
  if (err) throw err

  // Start App
  app.listen(process.env.PORT || 3000)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;docker-express-mongoose-redis-example&amp;quot;,
  &amp;quot;private&amp;quot;: true,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;node server.js&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;connect-redis&amp;quot;: &amp;quot;^3.0.1&amp;quot;,
    &amp;quot;express&amp;quot;: &amp;quot;^4.13.3&amp;quot;,
    &amp;quot;express-session&amp;quot;: &amp;quot;^1.11.3&amp;quot;,
    &amp;quot;ioredis&amp;quot;: &amp;quot;^1.9.1&amp;quot;,
    &amp;quot;mongoose&amp;quot;: &amp;quot;^4.2.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-machine-在-virtualbox-中创建-docker-host&#34;&gt;2. &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Machine&lt;/a&gt;：在 virtualbox 中创建 Docker Host&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ # 查看命令行帮助
$ docker-machine
$ # 创建 Docker Host
$ docker-machine create -d virtualbox dev
$ # 启动
$ docker-machine start dev
$ # 查看 dev IP
$ docker-machine ip dev
$ # 查看 dev 环境变量
$ docker-machine env dev
$ # 设置环境变量
$ eval &amp;quot;$(docker-machine env dev)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-compose-定义及操作&#34;&gt;3. &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Compose&lt;/a&gt;：定义及操作&lt;/h4&gt;

&lt;h5 id=&#34;为项目创建-dockerfile&#34;&gt;为项目创建 &lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfile&lt;/a&gt;&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd docker-express-mongoose-redis-example
$ touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM mhart/alpine-node
# FROM mhart/alpine-node:base
# FROM mhart/alpine-node:base-0.10

WORKDIR /src
ADD . .

# If you have native dependencies, you&#39;ll need extra tools
RUN apk add --update make gcc g++ python

# If you need npm, don&#39;t use a base tag
RUN npm install

# If you had native dependencies you can now remove build tools
RUN apk del make gcc g++ python &amp;amp;&amp;amp; \
  rm -rf /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp

EXPOSE 3000
CMD [&amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;创建-docker-compose-yml-来组合-node-js-redis-mongodb-服务&#34;&gt;创建 &lt;a href=&#34;https://docs.docker.com/compose/yml&#34;&gt;docker-compose.yml&lt;/a&gt; 来组合 Node.js, Redis, Mongodb 服务&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd docker-express-mongoose-redis-example
$ touch docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;app:
  build: .
  volumes:
    - .:/src
  links:
    - mongo
    - redis
  ports:
    - 3000:3000

redis:
  image: redis

mongo:
  image: mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ # 查看命令行帮助
$ docker-compose
$ # 创建
$ docker-compose build
$ # 启动 app, redis, mongo 等服务，特点是常驻前台
$ docker-compose up
$ # 也可以通过 `start` 启动，特点是常驻在后台
$ docker-compose start
$ # 停止服务
$ docker-compose stop
$ # 输出日志
$ docker-compose logs
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;测试-访问我们的服务-rocket&#34;&gt;测试、访问我们的服务 :rocket:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ open &amp;quot;http://$(docker-machine ip dev):3000&amp;quot;
$ open &amp;quot;http://$(docker-machine ip dev):3000/redis&amp;quot;
$ open &amp;quot;http://$(docker-machine ip dev):3000/redis/set&amp;quot;
$ open &amp;quot;http://$(docker-machine ip dev):3000/redis/get&amp;quot;
$ open &amp;quot;http://$(docker-machine ip dev):3000/mongoose&amp;quot;
$ open &amp;quot;http://$(docker-machine ip dev):3000/mongoose/set&amp;quot;
$ open &amp;quot;http://$(docker-machine ip dev):3000/mongoose/get&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;关闭服务-休息下&#34;&gt;关闭服务，休息下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker-compose stop
$ docker-machine stop dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Compose 的前身是 &lt;strong&gt;fig&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;up&lt;/code&gt; &lt;code&gt;start&lt;/code&gt; &lt;code&gt;logs&lt;/code&gt; &lt;code&gt;stop&lt;/code&gt; &lt;code&gt;rm&lt;/code&gt; 等 COMMANDs 可以针对某个 Container 使用 e.g: &lt;code&gt;$ docker-compose logs app&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;如果 Node 项目比较大，依赖的模块较多，频繁改动，我们可以不需要创建 Node 项目本身的 Container，只需要创建启动其他服务即可。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;其他工具&#34;&gt;其他工具&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com&#34;&gt;Vargant&lt;/a&gt; - 也是一款环境构建工具，比 Docker 还早&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vargant 是一款不错的工具，可以帮助我们快速搭建各种服务环境，也能团队之间进行分享，现在基于它的工具链也越来越丰富，感兴趣也可以一试。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不用其他构建工具，我们自己搭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“自己动手，丰衣足食” － 不依赖环境构建工具，自己搭，时间精力充足的化，不妨一试，会收获更多。&lt;/p&gt;

&lt;h3 id=&#34;最后&#34;&gt;最后&lt;/h3&gt;

&lt;p&gt;Docker 可玩的不仅仅如此，还可以打包、发布容器应用到线上，构建自己的 Paas(&lt;a href=&#34;https://github.com/progrium/dokku&#34;&gt;dokku&lt;/a&gt;) 服务等。&lt;/p&gt;

&lt;p&gt;Docker Compose 也可以有更高级玩法。&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  github: &#39;@fundon&#39;,
  email: &#39;cfddream#gmail.com&#39;,
  twitter: &#39;@_fundon&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;relates&#34;&gt;Relates&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/kitematic/&#34;&gt;https://docs.docker.com/kitematic/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/installation/mac/&#34;&gt;https://docs.docker.com/installation/mac/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/machine/install-machine/&#34;&gt;https://docs.docker.com/machine/install-machine/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;https://docs.docker.com/compose/install/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mhart/alpine-node&#34;&gt;https://github.com/mhart/alpine-node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/progrium/dokku&#34;&gt;https://github.com/progrium/dokku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu Setup</title>
      <link>https://fundon.me/blog/ubuntu_setup/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://fundon.me/blog/ubuntu_setup/</guid>
      <description>

&lt;h2 id=&#34;update-upgrade&#34;&gt;Update &amp;amp; Upgrade&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-user&#34;&gt;Add User&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# adduser fundon
# usermod fundon -G sudo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-search-and-show-package-info&#34;&gt;Package Search and Show Package Info&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-cache search golang
$ aptitude search golang
$ aptitude show golang
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;packages-install&#34;&gt;Packages Install&lt;/h2&gt;

&lt;h3 id=&#34;git&#34;&gt;Git&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;golang&#34;&gt;Golang&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install golang
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install docker.io
$ sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;node-js&#34;&gt;Node.js&lt;/h2&gt;

&lt;h3 id=&#34;ppa&#34;&gt;PPA&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://launchpad.net/~chris-lea/+archive/node.js&#34;&gt;https://launchpad.net/~chris-lea/+archive/node.js&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;source&#34;&gt;Source&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install build-essential
$ sudo apt-get install libssl-dev
$
$ sudo su fundon
$ git clone https://github.com/creationix/nvm.git ~/.nvm
$ echo &#39;source ~/.nvm/nvm.sh&#39; &amp;gt;&amp;gt; ~/.bashrc
$ nvm install -s 0.10.29
$ nvm install -s 0.11.13
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install Drone on Mac</title>
      <link>https://fundon.me/blog/install-drone-on-mac/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fundon.me/blog/install-drone-on-mac/</guid>
      <description>&lt;p&gt;DON&amp;rsquo;T LET BUGS INVADE YOUR CODE.&lt;br /&gt;
Start up a hosted continuous integration service for yourself or your team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Gogs on Mac OS X</title>
      <link>https://fundon.me/blog/install-gogs-on-mac/</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fundon.me/blog/install-gogs-on-mac/</guid>
      <description>

&lt;h2 id=&#34;dependences&#34;&gt;Dependences&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://brew.sh&#34;&gt;homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com&#34;&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.postgresql.org&#34;&gt;postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org&#34;&gt;go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gopm.io&#34;&gt;gopm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&#34;homebrew&#34;&gt;Homebrew&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;git&#34;&gt;git&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;postgresql&#34;&gt;postgresql&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;go&#34;&gt;go&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install go
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gopm&#34;&gt;gopm&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get -u github.com/gpmgo/gopm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gogs&#34;&gt;gogs&lt;/h3&gt;

&lt;p&gt;Build from dev source.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get -u github.com/gogits/gogs
$ mkdir -p ~/services &amp;amp;&amp;amp; cd ~/services
$ git clone --branch=dev file:///$GOPATH/src/github.com/gogits/gogs
$ cd gogs
$ gopm build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;h3 id=&#34;postgresql-1&#34;&gt;postgresql&lt;/h3&gt;

&lt;h4 id=&#34;init-postgresql&#34;&gt;Init postgresql&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ createdb
$ psql --command &amp;quot;CREATE USER root WITH SUPERUSER PASSWORD &#39;THE_DB_PASSWORD&#39;;&amp;quot;
$ createdb -O root gogs
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;start-postgresql-server&#34;&gt;Start postgresql server&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cp /usr/local/opt/postgresql/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
$ launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or just run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ postgres -D /usr/local/var/postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gogs-1&#34;&gt;gogs&lt;/h3&gt;

&lt;h4 id=&#34;custom-conf-app-ini&#34;&gt;custom/conf/app.ini&lt;/h4&gt;

&lt;p&gt;You can add git user or use currently logged in user.&lt;br /&gt;
If you want to add git user to run gogs.&lt;br /&gt;
See &lt;a href=&#34;http://wiki.freegeek.org/index.php/Mac_OSX_adduser_script&#34;&gt;http://wiki.freegeek.org/index.php/Mac_OSX_adduser_script&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ # Create custom folder
$ mkdir -p custom/conf
$ cp conf/app.ini custom/conf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;...

RUN_USER = git

[server]
SSH_PORT = 22

...

[database]
DB_TYPE = postgres
HOST = 127.0.0.1:5432

...

[security]
INSTALL_LOCK = true
SECRET_KEY = YOU_MUST_CHANGE

...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-gogs-server&#34;&gt;Run gogs server&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ~/services/gogs
$ ./gogs web
$ # open 127.0.0.0:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or add launchd plist file to &lt;code&gt;~/Library/LaunchAgents/io.gogs.web.plist&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
  &amp;lt;string&amp;gt;io.gogs.web&amp;lt;/string&amp;gt;
  &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
  &amp;lt;array&amp;gt;
    &amp;lt;string&amp;gt;sh&amp;lt;/string&amp;gt;
    &amp;lt;string&amp;gt;-c&amp;lt;/string&amp;gt;
    &amp;lt;string&amp;gt;cd /Users/fundon/services/gogs; ./gogs web&amp;lt;/string&amp;gt;
  &amp;lt;/array&amp;gt;
  &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
  &amp;lt;true/&amp;gt;
  &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
  &amp;lt;true/&amp;gt;
  &amp;lt;key&amp;gt;WorkingDirectory&amp;lt;/key&amp;gt;
  &amp;lt;string&amp;gt;/Users/fundon/services/gogs&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ launchctl load ~/Library/LaunchAgents/io.gogs.web.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh-remote&#34;&gt;SSH Remote&lt;/h2&gt;

&lt;h3 id=&#34;setting-ssh-config-etc-sshd-config&#34;&gt;Setting SSH config &lt;code&gt;/etc/sshd_config&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo cp /etc/sshd_config /etc/sshd_config~previous
$ sudo vi /etc/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit &lt;code&gt;/etc/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;PermitRootLogin no

RSAAuthentication yes
PubkeyAuthentication yes

UsePAM no
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-ssh-server&#34;&gt;Start SSH Server&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Open System Preferences &amp;gt; Sharing &amp;gt; Remote Login
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-ssh-articles&#34;&gt;Other SSH Articles&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/categories/ssh/&#34;&gt;https://help.github.com/categories/ssh/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-enjoy&#34;&gt;&amp;lt;3 Enjoy!&lt;/h2&gt;

&lt;h2 id=&#34;other&#34;&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gogs.io/docs/intro/&#34;&gt;http://gogs.io/docs/intro/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Install Go on Ubuntu</title>
      <link>https://fundon.me/blog/install-go-on-ubuntu/</link>
      <pubDate>Sat, 25 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fundon.me/blog/install-go-on-ubuntu/</guid>
      <description>

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VERSION=&amp;quot;1.3.3&amp;quot;
wget http://golang.org/dl/go$VERSION.linux-amd64.tar.gz
tar -C /usr/local -xzf go$VERSION.linux-amd64.tar.gz

export PATH=&amp;quot;$PATH:/usr/local/go/bin&amp;quot;

# You can custom `GOPATH`.
#export GOPATH=$HOME/dev/go
#export PATH=&amp;quot;$PATH:$GOPATH/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>